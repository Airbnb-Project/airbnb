openapi: 3.0.3
info:
  title: GoHome
  description: This is API for Group Project
  version: "1.0.0"
  contact:
    email: grfhnry@gmail.com
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ALFIANADSAPUTRA_1/AirBnB/1.0.0
  # Main URL
  - description: Main URL
    url: URL will be update soon
tags:
  - name: Auth
  - name: User
  - name: Homestay
  - name: Reservation
  - name: Feedback

# AUTH
paths:
  /login:
    post:
      tags:
        - "Auth"
      description: "Features login for users"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
            example:
              email: "grf@example.com"
              password: "grf123"
      responses:
        200:
          description: "login"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  id: 1
                  name: "griffin"
                  email: "grf@example.com"
                  phone: "0812345"
                  address: "makassar"
                message: "login success"
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJ1c2VySUQiOjR9.QTZxERh4CwC_UnL_eJvTi_A_qdLeBZ-IjR4nqoxjodk"
        400:
          $ref: "#/components/responses/400"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

#USER
  /register:
    post:
      tags:
        - "User"
      summary: "create new user"
      description: "endpoint for register new user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                phone:
                  type: string
                address:
                  type: string
            example:
              id: 1
              name: "griffin"
              email: "grf@example.com"
              password: "grf123"
              phone: "0812345"
              address: "makassar"
      responses:
        201:
          description: "success insert data"
          content:
              application/json:
                  schema:
                      type: object
                      properties:
                          message:
                              type: string
                  example:
                      message: "success create account"
        400:
            description: "bad request"
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/errorResponse"
                    examples:
                        duplicate:
                            value:
                                message: data already used
                        empty:
                            value:
                                message: username not allowed empty
                        validation:
                            $ref: "#/components/examples/validationError"
        404:
            $ref: "#/components/responses/404"
        500:
            description: "internal server error"
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/errorResponse"
                    examples:
                        internal:
                            $ref: "#/components/examples/internalServerError"
                        bcryptErr:
                            value:
                                message: password process error

    get:
      tags:
        - "User"
      summary: "show detail profile"
      description: "endpoint for user see their own profile"
      security:
        - JWTAuth: []
      responses:
        200:
          description: "show detail user profile"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                data:
                  id: 1
                  name: "griffin"
                  email: "grf@example.com"
                  address: "makassar"
                  role: ""
                  phone: "0812345"
                  photo_profile: ""
                  homestay:
                    - id: 1
                      name: "villa premium 1"
                      description: "villa di pegunungan yang sejuk"
                      price: "500.000/night"
                    - id: 2
                      name: "villa premium 2"
                      description: "villa di sawah yang sejuk"
                      price: "500.000/night" 
                    - id: 3
                      name: "villa premium 3"
                      description: "villa di pinggiran kota yang sejuk"
                      price: "500.000/night" 
                message: "success show profile"
        400:
          $ref: "#/components/responses/400"
        404:
          description: not found
          content:
              application/json:
                  schema:
                      type: object
                      properties:
                          message:
                              type: string
                  examples:
                      dataNotFound:
                          description: data user not found
                          value:
                              message: data not found
                      pathNotFound:
                          $ref: "#/components/examples/pathNotFound"
        500:
          $ref: "#/components/responses/500"

    put:
      tags:
        - "User"
      summary: "update user profile"
      description: "endpoint for user update their own profile"
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              name: "griffin"
              email: "grf@example.com"
              address: "makassar"
              phone: "0812345"
              photo_profile: ""
              role: "hoster"
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
            example:
              user_image: "https://ijs2nfub0s2u0831.png"
      responses:
        200:
          description: "update profile data"
          content:
            application/json:
              schema:
                  type: object
              example:
                  message: "success update profile"
        404:
          $ref: "#/components/responses/404"
        500:
          description: "internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
              examples:
                failedUploadImage:
                  value:
                    message: failed to upload image, server error
                internal:
                  value:
                    message: internal server error

    delete:
      tags:
        - "User"
      summary: "deactive user account"
      description: "endpoint for deactive user account"
      security:
        - JWTAuth: []
      responses:
        200:
          description: "deactive user account"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/responseObject"
              example:
                message: "success delete account"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

# HOMESTAY
  /homestays:
    post:
      tags:
        - Homestay
      summary: "Create Homestay" 
      description: "Create New Homestay"
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InsertHomestayObject"
            example:
              name: "Villa puncak"
              homestay address: "jl. kenanga, Malang"
              phone: 089777777
              price: 300000
              description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
              image1: AAkGBhQSERUUExQVFRUWGRwaGBgYGB0dGxkcHx
              image2: AAkGBhQSERUUExQVFRUWGRwaGBgYGB0dGxkcHx
              image3: AAkGBhQSERUUExQVFRUWGRwaGBgYGB0dGxkcHx
      responses:
        201:
          description: "Success Create Homestay"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "Success Create New Homestay"
        400 :
          $ref : "#/components/responses/400"  
        404 :
          $ref : "#/components/responses/404"  
        500:
          $ref: "#/components/responses/500"

components:
    securitySchemes:
        JWTAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
            description: "user token"
    schemas:
        responseObject:
            type: object
            properties:
                data:
                    type: object
                message:
                    type: string
        errorResponse:
            type: object
            properties:
                message:
                    type: string
        ### Homestay Schemas
        "InsertHomestayObject":
          type: object
          properties:
            "name":
              type: string
            "address":
              type: string
            "phone":
              type: integer
            "price": 
              type: integer
            "image1":
              type: string
              format: binary
            "image2":
              type: string
              format: binary
            "image3":
              type: string
              format: binary
            "description":
              type: string    
        "EditHomestayObject":
          type: object
          properties:
            "name":
              type: string
            "address":
              type: string
            "phone":
              type: integer
            "price": 
              type: integer
            "image1":
              type: string
              format: binary
            "image2":
              type: string
              format: binary
            "image3":
              type: string
              format: binary
            "description":
              type: string 

        ### Feedbacks Schemas
        "InsertFeedbackObject":
          type: object
          properties:
            "id homestay":
              type: integer
            "rating":
              type: string
            "feedback":
              type: string
            "id_homestay":
              type: string        

        "ResponseWithoutData":
          type: object
          properties:
            status:
              type: string
            message:
              type: string
        "ResponseWithData":
          type: object
          properties:
            status:
              type: string
            message: 
              type: string
            data:
              type: object
              
    examples:
        formatUploadError:
            value:
                message: bad request because of format not pdf, png, jpg, or jpeg
        validationError:
            value:
                message: field_name value must be the_condition
        failedUploadError:
            value:
                message: failed to upload image because internal server error
        credentialError:
            value:
                message: access is denied due to invalid credential
        internalServerError:
            value:
                message: internal server error
        pathNotFound:
            description: url path not found
            value:
                message: Not Found

            # responseObjectArr:
            # type: object
            # properties:
            #     data:
            #         type: array
            #         items:
            #             type: object
            #     message:
            #         type: string
    responses:
        400:
            description: "error from user"
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            message:
                                type: string
                    example:
                        message: "bad request"
        401:
            description: "unauthorized"
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            message:
                                type: string
                    example:
                        message: access is denied due to invalid credential
        404:
            description: "url path not found"
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/errorResponse"
                    example:
                        message: not found
        500:
            description: "error from server"
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            message:
                                type: string
                    example:
                        message: "internal server error"